datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ADMIN
  SUPERVISOR
  CLIENT
}

model User {
  id                          Int      @id @default(autoincrement())
  email                       String   @unique
  password                    String
  role                        Role     @default(CLIENT)
  firstName                   String
  lastName                    String
  phoneNumber                 String
  isDisabled                  Boolean  @default(false)
  lastLogin                   DateTime?
  lastPasswordChanged         DateTime?
  emailVerified               Boolean  @default(false)
  emailVerificationCode       String?
  emailVerificationCodeExpiry DateTime?
  passwordResetCode           String?
  passwordResetCodeExpiry     DateTime?
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt @default(now())
  reserves                    Reserve[]
  notifications               Notification[]
}

model Tent {
  id              Int             @id @default(autoincrement())
  header          String          @db.Text
  title           String          @db.Text
  description     String          @db.Text
  services        String          @db.Text 
  qtypeople       Int             @default(1)
  qtykids         Int             @default(0)
  images          String          @db.Text
  price           Float           @default(0)
  status          String          @default("ACTIVE") @db.Text
  custom_price    String          @default("[]") @db.Text
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt @default(now())
}

model Product {
  id              Int             @id @default(autoincrement())
  categoryId      Int
  category        ProductCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  name            String          @db.Text
  description     String          @db.Text
  price           Float           @default(0)
  stock           Int             @default(0)
  images          String          @db.Text
  status          String          @default("ACTIVE") @db.Text
  custom_price    String          @default("[]") @db.Text
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt @default(now())
}

model ProductCategory {
  id            Int               @id @default(autoincrement())
  name          String            @db.Text
  products      Product[]
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt @default(now())
}

model Experience {
  id              Int             @id @default(autoincrement())
  categoryId      Int
  category        ExperienceCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  header          String          @db.Text
  name            String          @db.Text
  description     String          @db.Text
  price           Float           @default(0)
  duration        Float           @default(0)
  images          String          @db.Text
  limit_age       Int             @default(1)
  qtypeople       Int             @default(1)
  suggestions     String          @default("[]") @db.Text
  status          String          @default("ACTIVE") @db.Text
  custom_price    String          @default("[]") @db.Text
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt @default(now())
}

model ExperienceCategory {
  id              Int             @id @default(autoincrement())
  name            String          @db.Text
  experiences     Experience[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt @default(now())
}

model DiscountCode {
  id              Int             @id @default(autoincrement())
  code            String
  expiredDate     DateTime        @default(now())
  discount        Int             @default(0)
  stock           Int             @default(1)
  status          String          @default("ACTIVE") @db.Text
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt @default(now())
}


model Promotion {
  id              Int             @id @default(autoincrement())
  title           String
  description     String          @db.Text
  images          String          @db.Text
  expiredDate     DateTime        @default(now())
  status          String          @default("ACTIVE") @db.Text
  qtypeople       Int             @default(1)
  qtykids         Int             @default(0)
  idtents         String          @db.Text
  idproducts      String          @default("[]") @db.Text
  idexperiences   String          @default("[]") @db.Text
  netImport       Float
  discount        Int
  grossImport     Float
  stock           Int             @default(1)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt @default(now())
}

enum PaymentStatus {
  PAID
  PENDING
  DEBT
}

model Reserve {
  id                Int             @id @default(autoincrement())
  qtypeople         Int             @default(1)
  qtykids           Int             @default(0)
  userId            Int
  user              User            @relation(fields: [userId], references: [id])
  tents             ReserveTent[]   
  products          ReserveProduct[] 
  experiences       ReserveExperience[]
  dateFrom          DateTime        
  dateTo            DateTime        
  dateSale          DateTime        @default(now())
  promotionId       Int             @default(0)            
  price_is_calculated Boolean       @default(false)
  discountCodeId    Int             @default(0)         
  netImport         Float           @default(0)
  discount          Int             @default(0)
  grossImport       Float           @default(0)
  canceled_reason   String          @db.Text
  canceled_status   Boolean         @default(false)
  paymentStatus     PaymentStatus   @default(PENDING) 
  aditionalPeople   Int             @default(0)
  createdAt                         DateTime @default(now())
  updatedAt         DateTime        @updatedAt @default(now())
}

model ReserveTent {
  id              Int       @id @default(autoincrement())
  reserveId       Int
  idTent          Int
  name            String    @db.Text
  price           Float     @default(0)
  quantity        Int       @default(1)
  reserve         Reserve   @relation(fields: [reserveId], references: [id], onDelete: Cascade)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt @default(now())
}

model ReserveProduct {
  id              Int       @id @default(autoincrement())
  reserveId       Int
  idProduct       Int
  name            String    @db.Text
  price           Float     @default(0)
  quantity        Int       @default(1)
  reserve         Reserve   @relation(fields: [reserveId], references: [id], onDelete: Cascade)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt @default(now())
}

model ReserveExperience {
  id              Int       @id @default(autoincrement())
  reserveId       Int
  idExperience    Int
  name            String    @db.Text
  price           Float     @default(0)
  quantity        Int       @default(1)
  day             DateTime  @default(now())
  reserve         Reserve   @relation(fields: [reserveId], references: [id], onDelete: Cascade)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt @default(now())
}

enum NotificationType {
  SUCCESS
  ERROR 
  INFORMATION
}

enum NotificationTarget {
  ADMIN
  SUPERVISOR
  USER
}

model Notification {
  id                Int                @id @default(autoincrement())
  title             String
  preview           String
  description       String             @db.Text
  type              NotificationType   @default(INFORMATION)
  date              DateTime           @default(now())
  createdAt         DateTime           @default(now())
  isRead            Boolean            @default(false)
  userId            Int?               
  userName          String?
  user              User?              @relation(fields: [userId], references: [id])
  target            NotificationTarget 
  relatedEntityId   Int?               
  relatedEntityType String?            
  relatedEntityName String?
}
