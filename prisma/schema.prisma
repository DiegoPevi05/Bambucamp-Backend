datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ADMIN
  SUPERVISOR
  CLIENT
}

model User {
  id                          Int      @id @default(autoincrement())
  email                       String   @unique
  password                    String
  role                        Role     @default(CLIENT)
  firstName                   String
  lastName                    String
  phoneNumber                 String
  isDisabled                  Boolean  @default(false)
  lastLogin                   DateTime?
  lastPasswordChanged         DateTime?
  emailVerified               Boolean  @default(false)
  emailVerificationCode       String?
  emailVerificationCodeExpiry DateTime?
  passwordResetCode           String?
  passwordResetCodeExpiry     DateTime?
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt @default(now())
  reserves                    Reserve[]
}

model Tent {
  id              Int             @id @default(autoincrement())
  header          String          @db.Text
  title           String          @db.Text
  description     String          @db.Text
  services        String          @db.Text 
  qtypeople       Int             @default(1)
  qtykids         Int             @default(0)
  images          String          @db.Text
  price           Float           @default(0)
  status          String          @default("ACTIVE") @db.Text
  custom_price    String          @default("[]") @db.Text
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt @default(now())
  reserveTents    ReserveTent[]
}

model Product {
  id              Int             @id @default(autoincrement())
  categoryId      Int
  category        ProductCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  name            String          @db.Text
  description     String          @db.Text
  price           Float           @default(0)
  images          String?         @db.Text
  status          String          @default("ACTIVE") @db.Text
  custom_price    String?         @default("[]") @db.Text
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt @default(now())
  reserveProducts ReserveProduct[]
}

model ProductCategory {
  id            Int               @id @default(autoincrement())
  name          String            @db.Text
  products      Product[]
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt @default(now())
}

model Experience {
  id              Int             @id @default(autoincrement())
  categoryId      Int
  category        ExperienceCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  header          String          @db.Text
  title           String          @db.Text
  description     String          @db.Text
  price           Float           @default(0)
  duration        String          @db.Text
  images          String?         @db.Text
  status          String          @default("ACTIVE") @db.Text
  custom_price    String?         @default("[]") @db.Text
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt @default(now())
  reserveExperiences ReserveExperience[]
}

model ExperienceCategory {
  id              Int             @id @default(autoincrement())
  name            String          @db.Text
  experiences     Experience[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt @default(now())
}

model DiscountCode {
  id              Int             @id @default(autoincrement())
  code            String
  expiredDate     DateTime?
  discount        Int             @default(0)
  stock           Int?
  status          String          @default("ACTIVE") @db.Text
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt @default(now())
  reserves        Reserve[]
}


model Promotion {
  id              Int             @id @default(autoincrement())
  title           String?
  description     String          @db.Text
  images          String?         @db.Text
  expiredDate     DateTime?
  status          String          @default("ACTIVE") @db.Text
  qtypeople       Int             @default(1)
  qtykids         Int             @default(0)
  idtents         String          @db.Text
  idproducts      String?         @db.Text
  idexperiences   String?         @db.Text
  netImport       Float
  discount        Int
  grossImport     Float
  stock           Int?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt @default(now())
  reserves        Reserve[]
}

enum PaymentStatus {
  PAID
  PENDING
  DEBT
}

model Reserve {
  id                Int             @id @default(autoincrement())
  qtypeople         Int             @default(1)
  qtykids           Int             @default(0)
  userId            Int
  user              User            @relation(fields: [userId], references: [id])
  tents             ReserveTent[]
  products          ReserveProduct[]
  experiences       ReserveExperience[]
  dateFrom          DateTime        @db.Date
  dateTo            DateTime        @db.Date
  dateSale          DateTime        @db.Date
  promotionId       Int?            
  promotion         Promotion?      @relation(fields: [promotionId], references: [id])
  price_is_calculated Boolean       @default(false)
  discountCodeId    Int?         
  discountCode      DiscountCode?   @relation(fields: [discountCodeId], references: [id])
  netImport         Float           @default(0)
  discount          Int             @default(0)
  grossImport       Float           @default(0)
  canceled_reason   String?         @db.Text
  canceled_status   Boolean         @default(false)
  paymentStatus     PaymentStatus   @default(PENDING) 
  aditionalPeople   Int             @default(0)
  createdAt                         DateTime @default(now())
  updatedAt         DateTime        @updatedAt @default(now())
}

model ReserveTent {
  reserveId Int
  tentId    Int
  reserve   Reserve @relation(fields: [reserveId], references: [id])
  tent      Tent    @relation(fields: [tentId], references: [id])
  @@id([reserveId, tentId])
  createdAt       DateTime @default(now())
  updatedAt       DateTime  @updatedAt @default(now())
}

model ReserveProduct {
  reserveId Int
  productId Int
  reserve   Reserve @relation(fields: [reserveId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
  @@id([reserveId, productId])
  createdAt       DateTime @default(now())
  updatedAt       DateTime  @updatedAt @default(now())
}

model ReserveExperience {
  reserveId       Int
  experienceId    Int
  reserve         Reserve   @relation(fields: [reserveId], references: [id])
  experience      Experience @relation(fields: [experienceId], references: [id])
  @@id([reserveId, experienceId])
  createdAt       DateTime @default(now())
  updatedAt       DateTime  @updatedAt @default(now())
}
